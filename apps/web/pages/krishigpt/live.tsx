"use client";

import { useEffect, useRef, useState } from "react";



// Supported languages
const LANGS = [
  { key: "en", label: "English" },
  { key: "hi", label: "рд╣рд┐рдВрджреА" },
  { key: "mr", label: "рдорд░рд╛рдареА" },
] as const;

type LangKey = (typeof LANGS)[number]["key"];
type ChatMessage = { role: "user" | "assistant"; content: string };

// UI translations
const TEXTS: Record<LangKey, any> = {
  en: {
    title: "ЁЯМ▒ KrishiGPT тАФ IndiaтАЩs Agriculture Guide",
    definition:
      "KrishiGPT is your multilingual, safe, and farmer-friendly AI advisor. Get instant help on crops, cattle, fisheries, mushrooms, hydroponics, mandi prices, schemes, and more. Always practical. Always label-safe.",
    suggestions: [
      "ЁЯМ▒ Will it rain tomorrow for my cotton spray?",
      "ЁЯРД My cow is not eating due to heat тАФ what to do?",
      "тШБя╕П PM-KISAN money not credited тАФ who to contact?",
      "ЁЯНД Mushrooms are browning тАФ how to fix?",
    ],
    inputPlaceholder: "Ask about crops, cattle, fisheries, weather, PM-KISANтАж",
    micTip: "Speak your question",
    send: "Send",
  },
  hi: {
    title: "ЁЯМ▒ KrishiGPT тАФ рднрд╛рд░рдд рдХрд╛ рдХреГрд╖рд┐ рдорд╛рд░реНрдЧрджрд░реНрд╢рдХ",
    definition:
      "KrishiGPT рдЖрдкрдХрд╛ рдмрд╣реБрднрд╛рд╖реА, рд╕реБрд░рдХреНрд╖рд┐рдд рдФрд░ рдХрд┐рд╕рд╛рди-рд╣рд┐рддреИрд╖реА рдПрдЖрдИ рд╕рд▓рд╛рд╣рдХрд╛рд░ рд╣реИред рдлрд╕рд▓, рдкрд╢реБрдзрди, рдорддреНрд╕реНрдп, рдорд╢рд░реВрдо, рд╣рд╛рдЗрдбреНрд░реЛрдкреЛрдирд┐рдХреНрд╕, рдордВрдбреА рднрд╛рд╡, рдпреЛрдЬрдирд╛рдПрдБ рдФрд░ рдЕрдзрд┐рдХ рдкрд░ рддреБрд░рдВрдд рдорджрдж рдкрд╛рдПрдВред рд╣рдореЗрд╢рд╛ рд╡реНрдпрд╛рд╡рд╣рд╛рд░рд┐рдХред рд╣рдореЗрд╢рд╛ рд╕реБрд░рдХреНрд╖рд┐рддред",
    suggestions: [
      "ЁЯМ▒ рдХреНрдпрд╛ рдХрд▓ рдХрдкрд╛рд╕ рдкрд░ рдЫрд┐рдбрд╝рдХрд╛рд╡ рдХреЗ рд╕рдордп рдмрд╛рд░рд┐рд╢ рд╣реЛрдЧреА?",
      "ЁЯРД рдореЗрд░реА рдЧрд╛рдп рдЧрд░реНрдореА рд╕реЗ рдирд╣реАрдВ рдЦрд╛ рд░рд╣реА тАФ рдХреНрдпрд╛ рдХрд░реЗрдВ?",
      "тШБя╕П рдкреАрдПрдо-рдХрд┐рд╕рд╛рди рдХрд╛ рдкреИрд╕рд╛ рдирд╣реАрдВ рдЖрдпрд╛ тАФ рдХрд┐рд╕рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВ?",
      "ЁЯНД рдорд╢рд░реВрдо рднреВрд░реЗ рд╣реЛ рд░рд╣реЗ рд╣реИрдВ тАФ рдХреНрдпрд╛ рдЙрдкрд╛рдп рдХрд░реЗрдВ?",
    ],
    inputPlaceholder: "рдлрд╕рд▓, рдкрд╢реБ, рдорддреНрд╕реНрдп, рдореМрд╕рдо, рдкреАрдПрдо-рдХрд┐рд╕рд╛рдитАж рдкреВрдЫреЗрдВ",
    micTip: "рдЕрдкрдирд╛ рдкреНрд░рд╢реНрди рдмреЛрд▓реЗрдВ",
    send: "рднреЗрдЬреЗрдВ",
  },
  mr: {
    title: "ЁЯМ▒ KrishiGPT тАФ рднрд╛рд░рддрд╛рдЪреЗ рдХреГрд╖реА рдорд╛рд░реНрдЧрджрд░реНрд╢рдХ",
    definition:
      "KrishiGPT рд╣рд╛ рддреБрдордЪрд╛ рдмрд╣реБрднрд╛рд╖рд┐рдХ, рд╕реБрд░рдХреНрд╖рд┐рдд рдЖрдгрд┐ рд╢реЗрддрдХрд░реА-рд╣рд┐рддрдХрд╛рд░реА рдПрдЖрдп рд╕рд▓реНрд▓рд╛рдЧрд╛рд░ рдЖрд╣реЗ. рдкрд┐рдХреЗ, рдЬрдирд╛рд╡рд░реЗ, рдорддреНрд╕реНрдп, рдорд╢рд░реВрдо, рд╣рд╛рдпрдбреНрд░реЛрдкреЛрдирд┐рдХреНрд╕, рдмрд╛рдЬрд╛рд░рднрд╛рд╡, рдпреЛрдЬрдирд╛ рдпрд╛рд╡рд░ рддреНрд╡рд░рд┐рдд рдорджрдд рдорд┐рд│рд╡рд╛. рдиреЗрд╣рдореА рд╡реНрдпрд╛рд╡рд╣рд╛рд░рд┐рдХ. рдиреЗрд╣рдореА рд╕реБрд░рдХреНрд╖рд┐рдд.",
    suggestions: [
      "ЁЯМ▒ рдЙрджреНрдпрд╛ рдХрд╛рдкреВрд╕ рдлрд╡рд╛рд░рдгреАрд▓рд╛ рдкрд╛рдКрд╕ рдкрдбреЗрд▓ рдХрд╛?",
      "ЁЯРД рдЙрд╖реНрдгрддреЗрдореБрд│реЗ рдорд╛рдЭреА рдЧрд╛рдп рдЦрд╛рдд рдирд╛рд╣реА тАФ рдХрд╛рдп рдХрд░рд╛рд╡реЗ?",
      "тШБя╕П рдкреАрдПрдо-рдХрд┐рд╕рд╛рди рдкреИрд╕реЗ рдЬрдорд╛ рдЭрд╛рд▓реЗ рдирд╛рд╣реАрдд тАФ рдХреЛрдгрд╛рд╢реА рд╕рдВрдкрд░реНрдХ рдХрд░рд╛рд╡рд╛?",
      "ЁЯНД рдорд╢рд░реВрдо рддрдкрдХрд┐рд░реА рд╣реЛрдд рдЖрд╣реЗрдд тАФ рдХрд╛рдп рдЙрдкрд╛рдп?",
    ],
    inputPlaceholder: "рдкрд┐рдХреЗ, рдЬрдирд╛рд╡рд░реЗ, рдорддреНрд╕реНрдп, рд╣рд╡рд╛рдорд╛рди, рдкреАрдПрдо-рдХрд┐рд╕рд╛рдитАж рд╡рд┐рдЪрд╛рд░рд╛",
    micTip: "рдЖрдкрд▓рд╛ рдкреНрд░рд╢реНрди рдмреЛрд▓рд╛",
    send: "рдкрд╛рдард╡рд╛",
  },
};

export default function KrishiGPTApp() {
  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const [input, setInput] = useState("");
  const [lang, setLang] = useState<LangKey>("en");
  const [loading, setLoading] = useState(false);
    const [started, setStarted] = useState(false); // ЁЯСИ new state
  const recognitionRef = useRef<SpeechRecognition | null>(null);

  // Handle sending message
  async function sendMessage(e?: React.FormEvent) {
    e?.preventDefault();
    if (!input.trim() || loading) return;

     if (!started) setStarted(true); // ЁЯСИ mark chat started

    const base = [...messages, { role: "user" as const, content: input }];
    setMessages(base);
    setInput("");
    setLoading(true);

    try {
      const resp = await fetch("/api/krishigpt/chat", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ message: input, lang }),
      });

      if (!resp.body) {
        const txt = await resp.text();
        setMessages([...base, { role: "assistant", content: txt }]);
        setLoading(false);
        return;
      }

      setMessages((prev) => [...prev, { role: "assistant", content: "" }]);
      const reader = resp.body.getReader();
      const decoder = new TextDecoder();

      let done = false;
      while (!done) {
        const { value, done: doneReading } = await reader.read();
        done = doneReading;
        const chunk = decoder.decode(value || new Uint8Array(), { stream: !done });
        if (chunk) {
          setMessages((prev) => {
            const last = prev[prev.length - 1];
            if (!last || last.role !== "assistant") return prev;
            const updated = [...prev];
            updated[updated.length - 1] = { role: "assistant", content: last.content + chunk };
            return updated;
          });
        }
      }
    } finally {
      setLoading(false);
    }
  }

  // Voice input
  function startVoiceInput() {
    const SpeechRecognition = (window as any).SpeechRecognition || (window as any).webkitSpeechRecognition;
    if (!SpeechRecognition) return alert("Speech recognition not supported");

    const recognition = new SpeechRecognition();
    recognition.lang = lang === "en" ? "en-IN" : "hi-IN";
    recognition.onresult = (event: any) => {
      const transcript = event.results[0][0].transcript;
      setInput(transcript);
    };
    recognition.start();
    recognitionRef.current = recognition;
  }

  return (
    
    <div className="flex flex-col items-center justify-start min-h-screen bg-gray-50 p-4 md:p-6">
      {/* Title after first message */}
{started && (
  <h2 className="text-lg font-semibold text-gray-700 mb-3">
    {TEXTS[lang].title}
  </h2>
)}
      
      {/* Language toggle */}
      <div className="flex flex-wrap justify-center gap-2 mb-6">
        {LANGS.map((l) => (
          <button
            key={l.key}
            onClick={() => setLang(l.key)}
            className={`rounded-full px-3 py-1 text-xs ring-1 ${
              lang === l.key ? "bg-emerald-600 text-white ring-emerald-600" : "bg-white text-gray-700 ring-gray-300"
            }`}
          >
            {l.label}
          </button>
        ))}
      </div>

      {/* Chat box */}
 <div className="w-full bg-white shadow-md overflow-y-auto mb-4 h-[70vh] md:h-[70vh] md:max-w-6xl md:rounded-lg md:p-6 rounded-none px-4 py-4">
       {messages.length === 0 ? (
          <div className="flex flex-col items-center justify-center h-full text-center text-gray-400">
            <div className="text-5xl mb-4">ЁЯМ▒</div>
            <h2 className="text-xl font-semibold">{TEXTS[lang].title}</h2>
            <p className="mt-2 max-w-md text-sm">{TEXTS[lang].definition}</p>
            <div className="mt-4 grid grid-cols-2 md:grid-cols-4 gap-3">
              {TEXTS[lang].suggestions.map((q) => (
                <button
                  key={q}
                  onClick={() => setInput(q)}
                  className="rounded-lg bg-gray-50 px-3 py-2 text-sm text-gray-600 hover:bg-gray-100"
                >
                  {q}
                </button>
              ))}
            </div>
          </div>
        ) : (
          messages.map((m, i) => (
            <div key={i} className={`mb-3 ${m.role === "user" ? "text-right" : "text-left"}`}>
              <div
                className={`inline-block px-4 py-3 rounded-lg text-sm whitespace-pre-line ${
                  m.role === "user" ? "bg-emerald-500 text-white" : "bg-gray-100 text-gray-800"
                }`}
              >
                {m.content}
              </div>
            </div>
          ))
        )}
        {loading && <div className="text-gray-400 text-sm">ThinkingтАж</div>}
      </div>

      {/* Input bar */}
     <form
  onSubmit={sendMessage}
  className="flex w-full md:max-w-6xl border border-gray-300 rounded-lg overflow-hidden"
>
        <input
          value={input}
          onChange={(e) => setInput(e.target.value)}
          onKeyDown={(e) => {
            if (e.key === "Enter" && !e.shiftKey) {
              e.preventDefault();
              sendMessage();
            }
          }}
          className="flex-1 border-none px-3 py-3 focus:outline-none"
          placeholder={TEXTS[lang].inputPlaceholder}
        />
        <button
          type="button"
          onClick={startVoiceInput}
          className="bg-gray-100 px-4 py-3 border-l border-gray-300"
          title={TEXTS[lang].micTip}
        >
          ЁЯОд
        </button>
        <button
  type="submit"
  disabled={loading}
  className="bg-emerald-600 text-white px-9 py-2 font-semibold hover:bg-emerald-700 disabled:opacity-60"
>
  {TEXTS[lang].send}
</button>

      </form>
    </div>
  );
}
