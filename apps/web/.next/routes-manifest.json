{
  "version": 3,
  "pages404": true,
  "caseSensitive": false,
  "basePath": "",
  "redirects": [
    {
      "source": "/:path+/",
      "destination": "/:path+",
      "internal": true,
      "statusCode": 308,
      "regex": "^(?:/((?:[^/]+?)(?:/(?:[^/]+?))*))/$"
    }
  ],
  "headers": [],
  "rewrites": {
    "beforeFiles": [],
    "afterFiles": [],
    "fallback": []
  },
  "dynamicRoutes": [],
  "staticRoutes": [
    {
      "page": "/",
      "regex": "^/(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/(?:/)?$"
    },
    {
      "page": "/about",
      "regex": "^/about(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/about(?:/)?$"
    },
    {
      "page": "/contact",
      "regex": "^/contact(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/contact(?:/)?$"
    },
    {
      "page": "/Header",
      "regex": "^/Header(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/Header(?:/)?$"
    },
    {
      "page": "/jobs",
      "regex": "^/jobs(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/jobs(?:/)?$"
    },
    {
      "page": "/krishigpt",
      "regex": "^/krishigpt(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/krishigpt(?:/)?$"
    },
    {
      "page": "/krishigpt/history",
      "regex": "^/krishigpt/history(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/krishigpt/history(?:/)?$"
    },
    {
      "page": "/krishigpt/live",
      "regex": "^/krishigpt/live(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/krishigpt/live(?:/)?$"
    },
    {
      "page": "/platform",
      "regex": "^/platform(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/platform(?:/)?$"
    },
    {
      "page": "/predictPrices",
      "regex": "^/predictPrices(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/predictPrices(?:/)?$"
    },
    {
      "page": "/products",
      "regex": "^/products(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/products(?:/)?$"
    }
  ],
  "dataRoutes": [],
  "rsc": {
    "header": "rsc",
    "varyHeader": "rsc, next-router-state-tree, next-router-prefetch, next-router-segment-prefetch",
    "prefetchHeader": "next-router-prefetch",
    "didPostponeHeader": "x-nextjs-postponed",
    "contentTypeHeader": "text/x-component",
    "suffix": ".rsc",
    "prefetchSuffix": ".prefetch.rsc",
    "prefetchSegmentHeader": "next-router-segment-prefetch",
    "prefetchSegmentSuffix": ".segment.rsc",
    "prefetchSegmentDirSuffix": ".segments"
  },
  "rewriteHeaders": {
    "pathHeader": "x-nextjs-rewritten-path",
    "queryHeader": "x-nextjs-rewritten-query"
  }
}