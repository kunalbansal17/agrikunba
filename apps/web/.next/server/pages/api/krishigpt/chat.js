"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/krishigpt/chat";
exports.ids = ["pages/api/krishigpt/chat"];
exports.modules = {

/***/ "(api-node)/../../node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fkrishigpt%2Fchat&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fkrishigpt%2Fchat.ts&middlewareConfigBase64=e30%3D!":
/*!******************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fkrishigpt%2Fchat&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fkrishigpt%2Fchat.ts&middlewareConfigBase64=e30%3D! ***!
  \******************************************************************************************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   handler: () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/api-utils */ \"(api-node)/../../node_modules/next/dist/server/api-utils/index.js\");\n/* harmony import */ var next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(api-node)/../../node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/route-modules/pages-api/module.compiled */ \"(api-node)/../../node_modules/next/dist/server/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api-node)/../../node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_krishigpt_chat_ts__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./pages/api/krishigpt/chat.ts */ \"(api-node)/./pages/api/krishigpt/chat.ts\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/dist/server/lib/trace/tracer */ \"(api-node)/../../node_modules/next/dist/server/lib/trace/tracer.js\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/dist/server/lib/trace/constants */ \"(api-node)/../../node_modules/next/dist/server/lib/trace/constants.js\");\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_pages_api_krishigpt_chat_ts__WEBPACK_IMPORTED_MODULE_4__]);\n_pages_api_krishigpt_chat_ts__WEBPACK_IMPORTED_MODULE_4__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n\n// Import the userland code.\n\n\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_3__.hoist)(_pages_api_krishigpt_chat_ts__WEBPACK_IMPORTED_MODULE_4__, 'default'));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_3__.hoist)(_pages_api_krishigpt_chat_ts__WEBPACK_IMPORTED_MODULE_4__, 'config');\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/krishigpt/chat\",\n        pathname: \"/api/krishigpt/chat\",\n        // The following aren't used in production.\n        bundlePath: '',\n        filename: ''\n    },\n    userland: _pages_api_krishigpt_chat_ts__WEBPACK_IMPORTED_MODULE_4__,\n    distDir: \".next\" || 0,\n    relativeProjectDir:  false || ''\n});\nasync function handler(req, res, ctx) {\n    let srcPage = \"/api/krishigpt/chat\";\n    // turbopack doesn't normalize `/index` in the page name\n    // so we need to to process dynamic routes properly\n    // TODO: fix turbopack providing differing value from webpack\n    if (false) {}\n    const prepareResult = await routeModule.prepare(req, res, {\n        srcPage\n    });\n    if (!prepareResult) {\n        res.statusCode = 400;\n        res.end('Bad Request');\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n        return;\n    }\n    const { query, params, prerenderManifest, routerServerContext } = prepareResult;\n    try {\n        const method = req.method || 'GET';\n        const tracer = (0,next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__.getTracer)();\n        const activeSpan = tracer.getActiveScopeSpan();\n        const onRequestError = routeModule.instrumentationOnRequestError.bind(routeModule);\n        const invokeRouteModule = async (span)=>routeModule.render(req, res, {\n                query: {\n                    ...query,\n                    ...params\n                },\n                params,\n                allowedRevalidateHeaderKeys: [],\n                multiZoneDraftMode: Boolean(false),\n                trustHostHeader: false,\n                // TODO: get this from from runtime env so manifest\n                // doesn't need to load\n                previewProps: prerenderManifest.preview,\n                propagateError: false,\n                dev: routeModule.isDev,\n                page: \"/api/krishigpt/chat\",\n                internalRevalidate: routerServerContext == null ? void 0 : routerServerContext.revalidate,\n                onError: (...args)=>onRequestError(req, ...args)\n            }).finally(()=>{\n                if (!span) return;\n                span.setAttributes({\n                    'http.status_code': res.statusCode,\n                    'next.rsc': false\n                });\n                const rootSpanAttributes = tracer.getRootSpanAttributes();\n                // We were unable to get attributes, probably OTEL is not enabled\n                if (!rootSpanAttributes) {\n                    return;\n                }\n                if (rootSpanAttributes.get('next.span_type') !== next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__.BaseServerSpan.handleRequest) {\n                    console.warn(`Unexpected root span type '${rootSpanAttributes.get('next.span_type')}'. Please report this Next.js issue https://github.com/vercel/next.js`);\n                    return;\n                }\n                const route = rootSpanAttributes.get('next.route');\n                if (route) {\n                    const name = `${method} ${route}`;\n                    span.setAttributes({\n                        'next.route': route,\n                        'http.route': route,\n                        'next.span_name': name\n                    });\n                    span.updateName(name);\n                } else {\n                    span.updateName(`${method} ${req.url}`);\n                }\n            });\n        // TODO: activeSpan code path is for when wrapped by\n        // next-server can be removed when this is no longer used\n        if (activeSpan) {\n            await invokeRouteModule(activeSpan);\n        } else {\n            await tracer.withPropagatedContext(req.headers, ()=>tracer.trace(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__.BaseServerSpan.handleRequest, {\n                    spanName: `${method} ${req.url}`,\n                    kind: next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__.SpanKind.SERVER,\n                    attributes: {\n                        'http.method': method,\n                        'http.target': req.url\n                    }\n                }, invokeRouteModule));\n        }\n    } catch (err) {\n        // we re-throw in dev to show the error overlay\n        if (routeModule.isDev) {\n            throw err;\n        }\n        // this is technically an invariant as error handling\n        // should be done inside of api-resolver onError\n        (0,next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0__.sendError)(res, 500, 'Internal Server Error');\n    } finally{\n        // We don't allow any waitUntil work in pages API routes currently\n        // so if callback is present return with resolved promise since no\n        // pending work\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n    }\n}\n\n//# sourceMappingURL=pages-api.js.map\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/../../node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fkrishigpt%2Fchat&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fkrishigpt%2Fchat.ts&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api-node)/./lib/krishigpt/weather.ts":
/*!**********************************!*\
  !*** ./lib/krishigpt/weather.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchForecast: () => (/* binding */ fetchForecast),\n/* harmony export */   geocodeLocation: () => (/* binding */ geocodeLocation),\n/* harmony export */   goNoGo: () => (/* binding */ goNoGo),\n/* harmony export */   summarizeWeather: () => (/* binding */ summarizeWeather)\n/* harmony export */ });\n// /apps/web/lib/weather.ts\nconst OME_GEO = \"https://geocoding-api.open-meteo.com/v1/search\";\nconst OME_FC = \"https://api.open-meteo.com/v1/forecast\";\n// --- NEW: Google Geocoding wrapper ---\nasync function geocodeGoogle(query) {\n    try {\n        const url = `https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(query)}&key=${process.env.GOOGLE_MAPS_KEY}`;\n        const r = await fetch(url);\n        if (!r.ok) return null;\n        const j = await r.json();\n        if (!j.results || j.results.length === 0) return null;\n        const best = j.results[0];\n        const loc = best.geometry.location;\n        let pincode;\n        const comp = best.address_components.find((c)=>c.types.includes(\"postal_code\"));\n        if (comp) pincode = comp.long_name;\n        return {\n            name: best.formatted_address,\n            admin1: \"\",\n            country: \"\",\n            latitude: loc.lat,\n            longitude: loc.lng,\n            pincode,\n            provider: \"google\"\n        };\n    } catch (err) {\n        console.error(\"Google geocode error:\", err);\n        return null;\n    }\n}\n// --- MAIN: Combined geocodeLocation ---\nasync function geocodeLocation(q, lang = \"en\") {\n    if (!q) return null;\n    // 1. Try Google\n    const g = await geocodeGoogle(q);\n    if (g) return g;\n    // 2. Fallback to Open-Meteo\n    const url = new URL(OME_GEO);\n    url.searchParams.set(\"name\", q);\n    url.searchParams.set(\"count\", \"1\");\n    url.searchParams.set(\"language\", lang);\n    url.searchParams.set(\"country\", \"IN\");\n    const r = await fetch(url.toString(), {\n        cache: \"no-store\"\n    });\n    if (!r.ok) return null;\n    const j = await r.json();\n    let hit = j?.results?.[0];\n    if (!hit && /[,.-]/.test(q)) {\n        const last = q.split(/[,-.]/).map((s)=>s.trim()).filter(Boolean).pop();\n        if (last && last.toLowerCase() !== q.toLowerCase()) {\n            return geocodeLocation(last, lang);\n        }\n    }\n    if (!hit) return null;\n    return {\n        name: hit.name,\n        admin1: hit.admin1,\n        country: hit.country,\n        latitude: hit.latitude,\n        longitude: hit.longitude,\n        provider: \"open-meteo\"\n    };\n}\n// (rest of your file stays SAME: fetchForecast, goNoGo, summarizeWeather)\nasync function fetchForecast(lat, lon) {\n    const url = new URL(OME_FC);\n    url.searchParams.set(\"latitude\", String(lat));\n    url.searchParams.set(\"longitude\", String(lon));\n    url.searchParams.set(\"timezone\", \"auto\");\n    url.searchParams.set(\"current_weather\", \"true\");\n    url.searchParams.set(\"hourly\", [\n        \"precipitation_probability\",\n        \"precipitation\",\n        \"wind_speed_10m\",\n        \"relative_humidity_2m\"\n    ].join(\",\"));\n    url.searchParams.set(\"daily\", [\n        \"precipitation_probability_max\",\n        \"precipitation_sum\",\n        \"wind_speed_10m_max\",\n        \"temperature_2m_max\",\n        \"temperature_2m_min\"\n    ].join(\",\"));\n    url.searchParams.set(\"windspeed_unit\", \"kmh\");\n    url.searchParams.set(\"precipitation_unit\", \"mm\");\n    const r = await fetch(url.toString(), {\n        cache: \"no-store\"\n    });\n    if (!r.ok) return null;\n    const j = await r.json();\n    const snap = {\n        place: \"\",\n        lat,\n        lon,\n        now: j.current_weather ? {\n            tempC: j.current_weather.temperature,\n            windKmh: j.current_weather.windspeed,\n            weathercode: j.current_weather.weathercode\n        } : undefined,\n        today: {\n            precipProbMax: j?.daily?.precipitation_probability_max?.[0],\n            precipSumMm: j?.daily?.precipitation_sum?.[0],\n            windMaxKmh: j?.daily?.wind_speed_10m_max?.[0],\n            tMinC: j?.daily?.temperature_2m_min?.[0],\n            tMaxC: j?.daily?.temperature_2m_max?.[0]\n        },\n        next48h: []\n    };\n    const hours = j?.hourly?.time ?? [];\n    const pp = j?.hourly?.precipitation_probability ?? [];\n    const p = j?.hourly?.precipitation ?? [];\n    const w = j?.hourly?.wind_speed_10m ?? [];\n    const rh = j?.hourly?.relative_humidity_2m ?? [];\n    for(let i = 0; i < Math.min(hours.length, 48); i++){\n        snap.next48h.push({\n            iso: hours[i],\n            precipProb: pp?.[i],\n            precipMm: p?.[i],\n            windKmh: w?.[i],\n            rh: rh?.[i]\n        });\n    }\n    return snap;\n}\nfunction goNoGo(s, activity) {\n    const window6h = s.next48h.slice(0, 6);\n    const window12h = s.next48h.slice(0, 12);\n    const window24h = s.next48h.slice(0, 24);\n    const maxProb6 = Math.max(...window6h.map((h)=>h.precipProb ?? 0));\n    const maxWind6 = Math.max(...window6h.map((h)=>h.windKmh ?? 0));\n    const sumRain6 = window6h.reduce((a, h)=>a + (h.precipMm ?? 0), 0);\n    const maxProb24 = Math.max(...window24h.map((h)=>h.precipProb ?? 0));\n    const sumRain24 = window24h.reduce((a, h)=>a + (h.precipMm ?? 0), 0);\n    if (activity === \"spray\") {\n        if (maxProb6 >= 40 || sumRain6 >= 1 || maxWind6 >= 15) {\n            return {\n                decision: \"NO_GO\",\n                reason: \"High rain chance or strong wind in next 6h.\"\n            };\n        }\n        const hasGoodWindow = window12h.some((h)=>(h.precipProb ?? 0) < 30 && (h.windKmh ?? 0) < 12 && (h.rh ?? 60) <= 85);\n        return {\n            decision: \"GO\",\n            reason: hasGoodWindow ? \"Favorable window in next 12h.\" : \"Conditions acceptable.\"\n        };\n    }\n    if (sumRain24 >= 5 || maxProb24 >= 60) {\n        return {\n            decision: \"NO_GO\",\n            reason: \"Rain likely; save water & reassess after rainfall.\"\n        };\n    }\n    return {\n        decision: \"GO\",\n        reason: \"Low rain risk; irrigation suitable.\"\n    };\n}\nfunction summarizeWeather(placeLabel, s) {\n    const today = s.today;\n    const peakProb = Math.max(...s.next48h.map((h)=>h.precipProb ?? 0));\n    const peakWind = Math.max(...s.next48h.map((h)=>h.windKmh ?? 0));\n    return [\n        `Weather@${placeLabel} (lat ${s.lat.toFixed(2)}, lon ${s.lon.toFixed(2)})`,\n        s.now?.tempC != null ? `Now: ${s.now.tempC}°C, wind ${Math.round(s.now.windKmh ?? 0)} km/h` : \"\",\n        `Today: rain prob max ${today.precipProbMax ?? \"-\"}%, rain total ${today.precipSumMm ?? \"-\"} mm, wind max ${today.windMaxKmh ?? \"-\"} km/h, Tmin/Tmax ${today.tMinC ?? \"-\"}°/${today.tMaxC ?? \"-\"}°C`,\n        `Next 48h peaks: rain prob ${peakProb}%, wind ${Math.round(peakWind)} km/h`\n    ].filter(Boolean).join(\" • \");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./lib/krishigpt/weather.ts\n");

/***/ }),

/***/ "(api-node)/./lib/prisma.ts":
/*!***********************!*\
  !*** ./lib/prisma.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   prisma: () => (/* binding */ prisma)\n/* harmony export */ });\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prisma/client */ \"@prisma/client\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_prisma_client__WEBPACK_IMPORTED_MODULE_0__);\n\nconst globalForPrisma = global;\nconst prisma = globalForPrisma.prisma || new _prisma_client__WEBPACK_IMPORTED_MODULE_0__.PrismaClient({\n    log: [\n        \"query\",\n        \"error\",\n        \"warn\"\n    ]\n});\nif (true) globalForPrisma.prisma = prisma;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL2xpYi9wcmlzbWEudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQThDO0FBRTlDLE1BQU1DLGtCQUFrQkM7QUFFakIsTUFBTUMsU0FDWEYsZ0JBQWdCRSxNQUFNLElBQ3RCLElBQUlILHdEQUFZQSxDQUFDO0lBQ2hCSSxLQUFLO1FBQUM7UUFBUztRQUFTO0tBQU87QUFDaEMsR0FBRztBQUVMLElBQUlDLElBQXFDLEVBQUVKLGdCQUFnQkUsTUFBTSxHQUFHQSIsInNvdXJjZXMiOlsiL1VzZXJzL2t1bmFsL2FncmlrdW5iYS9hcHBzL3dlYi9saWIvcHJpc21hLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFByaXNtYUNsaWVudCB9IGZyb20gXCJAcHJpc21hL2NsaWVudFwiO1xuXG5jb25zdCBnbG9iYWxGb3JQcmlzbWEgPSBnbG9iYWwgYXMgdW5rbm93biBhcyB7IHByaXNtYTogUHJpc21hQ2xpZW50IH07XG5cbmV4cG9ydCBjb25zdCBwcmlzbWEgPVxuICBnbG9iYWxGb3JQcmlzbWEucHJpc21hIHx8XG4gIG5ldyBQcmlzbWFDbGllbnQoe1xuICAgbG9nOiBbXCJxdWVyeVwiLCBcImVycm9yXCIsIFwid2FyblwiXSxcbiAgfSk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIGdsb2JhbEZvclByaXNtYS5wcmlzbWEgPSBwcmlzbWE7XG4iXSwibmFtZXMiOlsiUHJpc21hQ2xpZW50IiwiZ2xvYmFsRm9yUHJpc21hIiwiZ2xvYmFsIiwicHJpc21hIiwibG9nIiwicHJvY2VzcyJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api-node)/./lib/prisma.ts\n");

/***/ }),

/***/ "(api-node)/./pages/api/krishigpt/chat.ts":
/*!*************************************!*\
  !*** ./pages/api/krishigpt/chat.ts ***!
  \*************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai */ \"openai\");\n/* harmony import */ var _lib_prisma__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/prisma */ \"(api-node)/./lib/prisma.ts\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _lib_krishigpt_weather__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/lib/krishigpt/weather */ \"(api-node)/./lib/krishigpt/weather.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([openai__WEBPACK_IMPORTED_MODULE_0__]);\nopenai__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n\nconst config = {\n    api: {\n        bodyParser: {\n            sizeLimit: \"1mb\"\n        }\n    }\n};\n//logging time\nconst t0 = Date.now();\nconst openai = new openai__WEBPACK_IMPORTED_MODULE_0__[\"default\"]({\n    apiKey: process.env.OPENAI_API_KEY\n});\n/** 🔧 KrishiGPT system prompt */ const BASE_PROMPT = `\nYou are 🌱 KrishiGPT — India’s Agriculture Guide.\n- Speak in the user's chosen language, be concise, friendly, and use a few helpful emojis.\n- Answer strictly in user's chosen language. Do not switch languages unless explicitly asked.\n- Focus on crops, livestock, mandi prices, weather, warehouses, and government schemes.\n- When asked for actionable advice, be practical and safe; cite assumptions or data snapshots if provided.\n- If a topic is outside agriculture, gently steer the user back with a relevant suggestion.\n- Consider all queries agriculture-related unless explicitly personal.\n`;\n// ———————————————————————————————————————————————————————————————\n// Helpers\n// ———————————————————————————————————————————————————————————————\nfunction extractPincode(s) {\n    const m = s.match(/\\b[1-9]\\d{5}\\b/);\n    return m ? m[0] : null;\n}\nfunction ensureVisitorId(req, res, incoming) {\n    let vid = (incoming ?? \"\").trim() || req.cookies?.[\"agk_vid\"] || \"\";\n    if (!vid) vid = `v_${(0,crypto__WEBPACK_IMPORTED_MODULE_2__.randomUUID)()}`;\n    if (req.cookies?.[\"agk_vid\"] !== vid) {\n        const expires = new Date(Date.now() + 365 * 24 * 60 * 60 * 1000);\n        res.setHeader(\"Set-Cookie\", `agk_vid=${vid}; Path=/; HttpOnly; SameSite=Lax; Expires=${expires.toUTCString()}`);\n    }\n    return vid;\n}\n// ———————————————————————————————————————————————————————————————\n// Route\n// ———————————————————————————————————————————————————————————————\nasync function handler(req, res) {\n    if (req.method !== \"POST\") return res.status(405).end();\n    const { chatId: incomingChatId, message, lang = \"en\", visitorId, loc, temperature = 0.6, max_tokens = 512 } = req.body ?? {};\n    if (!message || typeof message !== \"string\") {\n        return res.status(400).json({\n            error: \"NO_MESSAGE\"\n        });\n    }\n    try {\n        // 1) Ensure visitorId and Chat row\n        const vid = ensureVisitorId(req, res, visitorId ?? null);\n        let chat = incomingChatId ? await _lib_prisma__WEBPACK_IMPORTED_MODULE_1__.prisma.chat.findUnique({\n            where: {\n                id: incomingChatId\n            }\n        }) : null;\n        if (!chat) {\n            chat = await _lib_prisma__WEBPACK_IMPORTED_MODULE_1__.prisma.chat.create({\n                data: {\n                    visitorId: vid,\n                    lang\n                }\n            });\n        }\n        // 2) Pre-create assistant row (needed for streaming)\n        const [userRow, assistantRow] = await _lib_prisma__WEBPACK_IMPORTED_MODULE_1__.prisma.$transaction([\n            _lib_prisma__WEBPACK_IMPORTED_MODULE_1__.prisma.message.create({\n                data: {\n                    chatId: chat.id,\n                    role: \"USER\",\n                    content: message,\n                    model: \"user\"\n                }\n            }),\n            _lib_prisma__WEBPACK_IMPORTED_MODULE_1__.prisma.message.create({\n                data: {\n                    chatId: chat.id,\n                    role: \"ASSISTANT\",\n                    content: \"\",\n                    model: \"gpt-4o-mini\"\n                },\n                select: {\n                    id: true\n                }\n            })\n        ]);\n        console.log(\"Intent detection:\", Date.now() - t0, \"ms\");\n        // 3) Detect weather intent\n        const detect = await openai.chat.completions.create({\n            model: \"gpt-4o-mini\",\n            temperature: 0.0,\n            response_format: {\n                type: \"json_schema\",\n                json_schema: {\n                    name: \"WeatherIntent\",\n                    schema: {\n                        type: \"object\",\n                        properties: {\n                            need_weather: {\n                                type: \"boolean\"\n                            },\n                            place_text: {\n                                type: \"string\"\n                            },\n                            activity: {\n                                type: \"string\",\n                                enum: [\n                                    \"none\",\n                                    \"spray\",\n                                    \"irrigate\"\n                                ]\n                            },\n                            timeframe: {\n                                type: \"string\",\n                                enum: [\n                                    \"today\",\n                                    \"tomorrow\",\n                                    \"next_48h\",\n                                    \"none\"\n                                ]\n                            },\n                            confidence: {\n                                type: \"number\",\n                                minimum: 0,\n                                maximum: 1\n                            }\n                        },\n                        required: [\n                            \"need_weather\"\n                        ],\n                        additionalProperties: false\n                    }\n                }\n            },\n            messages: [\n                {\n                    role: \"system\",\n                    content: \"Infer if answering requires weather. Handle any language. Extract timeframe (today/tomorrow/next_48h).\"\n                },\n                {\n                    role: \"user\",\n                    content: message\n                }\n            ]\n        });\n        let wantWeather = false;\n        let placeText = \"\";\n        let timeframe = \"none\";\n        let activity = \"none\";\n        try {\n            const payload = JSON.parse(detect.choices[0]?.message?.content ?? \"{}\");\n            wantWeather = Boolean(payload?.need_weather);\n            placeText = (payload?.place_text ?? \"\").trim();\n            timeframe = payload?.timeframe || \"none\";\n            activity = payload?.activity === \"spray\" || payload?.activity === \"irrigate\" ? payload.activity : \"none\";\n            if (typeof payload?.confidence === \"number\" && payload.confidence < 0.45) {\n                wantWeather = false;\n            }\n        } catch  {\n            wantWeather = false;\n        }\n        // 4) LOCATION — reuse last if none new\n        const pinFromText = extractPincode(message);\n        let lat = loc?.lat;\n        let lon = loc?.lon;\n        let label = loc ? \"your location\" : \"\";\n        if ((lat == null || lon == null) && placeText) {\n            const hit = await (0,_lib_krishigpt_weather__WEBPACK_IMPORTED_MODULE_3__.geocodeLocation)(placeText, lang);\n            if (hit) {\n                lat = hit.latitude;\n                lon = hit.longitude;\n                label = [\n                    hit.name,\n                    hit.admin1\n                ].filter(Boolean).join(\", \");\n            }\n        } else if (lat == null || lon == null) {\n            const lastLoc = await _lib_prisma__WEBPACK_IMPORTED_MODULE_1__.prisma.message.findFirst({\n                where: {\n                    chatId: chat.id,\n                    model: \"ctx:location\"\n                },\n                orderBy: {\n                    createdAt: \"desc\"\n                }\n            });\n            if (lastLoc) {\n                const parsed = JSON.parse(lastLoc.content);\n                lat = parsed.lat;\n                lon = parsed.lon;\n                label = parsed.label;\n            }\n        }\n        // 5) WEATHER snapshot (non-blocking save later)\n        let weatherSystem = \"\";\n        let weatherPayload = null;\n        if (wantWeather && lat != null && lon != null) {\n            const fc = await (0,_lib_krishigpt_weather__WEBPACK_IMPORTED_MODULE_3__.fetchForecast)(lat, lon);\n            if (fc) {\n                fc.place = label || \"Selected location\";\n                let summary = (0,_lib_krishigpt_weather__WEBPACK_IMPORTED_MODULE_3__.summarizeWeather)(fc.place, fc);\n                if (timeframe === \"today\") {\n                    summary = `🌤️ Today in ${fc.place}: rain chance ${fc.today.precipProbMax}%, total ${fc.today.precipSumMm}mm.`;\n                } else if (timeframe === \"tomorrow\") {\n                    summary = `🌧️ Tomorrow in ${fc.place}: rain chance ${fc.today.precipProbMax}%, total ${fc.today.precipSumMm}mm.`;\n                }\n                const decision = activity !== \"none\" ? (0,_lib_krishigpt_weather__WEBPACK_IMPORTED_MODULE_3__.goNoGo)(fc, activity) : null;\n                weatherSystem = `[WEATHER]\\n${summary}\\n` + (decision ? `Decision for ${activity}: ${decision.decision} — ${decision.reason}\\n` : ``);\n                weatherPayload = {\n                    label: fc.place,\n                    summary,\n                    activity,\n                    decision,\n                    ts: new Date().toISOString()\n                };\n            }\n        }\n        console.log(\"Weather lookup:\", Date.now() - t0, \"ms\");\n        // 6) Final system prompt\n        const systemPrompt = `${BASE_PROMPT}\\n${weatherSystem}\\nKeep output clean.`;\n        // 7) Stream to client immediately\n        res.writeHead(200, {\n            \"Content-Type\": \"text/plain; charset=utf-8\",\n            \"Transfer-Encoding\": \"chunked\",\n            \"Cache-Control\": \"no-store\",\n            \"X-Chat-Id\": chat.id,\n            \"X-Assistant-Id\": assistantRow.id,\n            \"X-Visitor-Id\": vid\n        });\n        const completion = await openai.chat.completions.create({\n            model: \"gpt-4o-mini\",\n            stream: true,\n            temperature,\n            max_tokens,\n            messages: [\n                {\n                    role: \"system\",\n                    content: systemPrompt\n                },\n                {\n                    role: \"user\",\n                    content: message\n                }\n            ]\n        });\n        let full = \"\";\n        for await (const part of completion){\n            const delta = part.choices?.[0]?.delta?.content ?? \"\";\n            if (delta) {\n                full += delta;\n                res.write(delta);\n            }\n        }\n        res.end();\n        console.log(\"Started streaming at:\", Date.now() - t0, \"ms\");\n        // 8) Persist context/weather/suggestions async (fire-and-forget)\n        setImmediate(async ()=>{\n            try {\n                await _lib_prisma__WEBPACK_IMPORTED_MODULE_1__.prisma.$transaction([\n                    _lib_prisma__WEBPACK_IMPORTED_MODULE_1__.prisma.message.update({\n                        where: {\n                            id: assistantRow.id\n                        },\n                        data: {\n                            content: full\n                        }\n                    }),\n                    ...weatherPayload ? [\n                        _lib_prisma__WEBPACK_IMPORTED_MODULE_1__.prisma.message.create({\n                            data: {\n                                chatId: chat.id,\n                                role: \"SYSTEM\",\n                                model: \"ctx:weather\",\n                                content: JSON.stringify(weatherPayload)\n                            }\n                        })\n                    ] : []\n                ]);\n                // Suggestions async\n                const suggRes = await openai.chat.completions.create({\n                    model: \"gpt-4o-mini\",\n                    temperature: 0.2,\n                    max_tokens: 120,\n                    response_format: {\n                        type: \"json_schema\",\n                        json_schema: {\n                            name: \"Suggestions\",\n                            schema: {\n                                type: \"object\",\n                                properties: {\n                                    suggestions: {\n                                        type: \"array\",\n                                        items: {\n                                            type: \"string\"\n                                        },\n                                        minItems: 3,\n                                        maxItems: 3\n                                    }\n                                },\n                                required: [\n                                    \"suggestions\"\n                                ],\n                                additionalProperties: false\n                            }\n                        }\n                    },\n                    messages: [\n                        {\n                            role: \"system\",\n                            content: \"Generate 3 short follow-up questions in the same language. Under 12 words. Use real scheme/crop/place names when possible.\"\n                        },\n                        {\n                            role: \"user\",\n                            content: `Language: ${lang}\\nUser asked: ${message}\\nAssistant replied: ${full}`\n                        }\n                    ]\n                });\n                const payload = JSON.parse(suggRes.choices[0]?.message?.content ?? \"{}\");\n                const suggestions = Array.isArray(payload?.suggestions) ? payload.suggestions : [];\n                if (suggestions.length === 3) {\n                    await _lib_prisma__WEBPACK_IMPORTED_MODULE_1__.prisma.message.create({\n                        data: {\n                            chatId: chat.id,\n                            role: \"SYSTEM\",\n                            model: \"suggestions:v1\",\n                            content: JSON.stringify({\n                                parentAssistantId: assistantRow.id,\n                                suggestions,\n                                ts: new Date().toISOString()\n                            })\n                        }\n                    });\n                }\n            } catch (err) {\n                console.error(\"Background persistence failed:\", err);\n            }\n        });\n        console.log(\"Total:\", Date.now() - t0, \"ms\");\n    } catch (err) {\n        try {\n            res.write(`\\n\\nSorry, I hit an error. ${String(err?.message ?? err)} 😔`);\n            res.end();\n        } catch  {}\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./pages/api/krishigpt/chat.ts\n");

/***/ }),

/***/ "@prisma/client":
/*!*********************************!*\
  !*** external "@prisma/client" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("@prisma/client");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "openai":
/*!*************************!*\
  !*** external "openai" ***!
  \*************************/
/***/ ((module) => {

module.exports = import("openai");;

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api-node)/../../node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fkrishigpt%2Fchat&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fkrishigpt%2Fchat.ts&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();